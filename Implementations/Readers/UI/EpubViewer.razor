@using Maria.Readers.Handlers
@using Maria.Translation.Japanese
@using Maria.Translation.Japanese.Edrdg
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics
@using Microsoft.JSInterop

<script src="get-dimensions.js"></script>

<div style="width:100vw" @onclick="HandleClickOnContent">
    @if (Book is not null)
    {
        <h1>@Book?.TableOfContents[CurrentChapter].Item1</h1>
        @foreach (List<Node> line in Book?.TableOfContents[CurrentChapter].Item2.Lines!)
        {
            <div style="margin-bottom:5px; display:flex; width:100%;flex-wrap:wrap;justify-content:flex-start">
                @foreach (Node node in line)
                {
                    <p @onclick="() => ShowPopup(node.EdrdgEntry)" @onclick:stopPropagation>@node.Text</p>
                }
            </div>
        }
    }
</div>

@if (showPopup)
{
    <div style="position:fixed;top:0;left:0">
            <TranslationCard Entry="selectedEdrdgEntry" OnClose="ClosePopup"/>
    </div>
}
@code {
    [Inject]
    private IJSRuntime JS { get; set; }

    [Parameter]
    public string PathToFile { get; set; }

    private Epub? Book { get; set; } = null;
    //I sure have a penchant for nested lists. But what can I do? A book IS a list of pages, a page IS a list of lines, and a line IS a list of words. I dont make the rules. Is there some smarter data structure? Probably. But who cares, this is fine.
    private List<List<List<Node>>> Pages { get; set; } = new List<List<List<Node>>>();

    private int CurrentChapter { get; set; } = 0;

    private bool showPopup = false;
    private EdrdgEntry selectedEdrdgEntry;

    protected override Task OnInitializedAsync()
    {
        JapaneseTranslator.PathToUnidic = "D:\\Programs\\Data\\Unidic";
        JapaneseTranslator.PathToDictionary = "D:\\Programs\\Maria-chan\\Services\\Translation\\JMDict\\";
        try
        {
            JapaneseTranslator.Initialize();
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);
        }
        return base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Debug.WriteLine("PathToFile: " + PathToFile);

        Book = await EpubLoader.LoadEpub(PathToFile);
        await LoadChapter(11);
        CurrentChapter = 11;
    }

    private void NextPage()
    {
        //Move to the next page
    }

    private void PreviousPage()
    {
        //Move to the previous page
    }

    private void NextChapter()
    {
        //Move to the next chapter
    }

    private void PreviousChapter()
    {
        //Move to the previous chapter
    }

    private async Task LoadChapter(int chapter)
    {
        //Formatter.Load does not seem like good naming
        await EpubFormatter.LoadChapter(Book.TableOfContents[chapter].Item2);
    }

    private void ShowPopup(EdrdgEntry edrdgEntry)
    {
        //Necessary because not everything has a translation for various reasons
        if (edrdgEntry is null)
        {
            return;
        }
        selectedEdrdgEntry = edrdgEntry;
        showPopup = true;
    }

    private async void HandleClickOnContent(MouseEventArgs e)
    {
        if (showPopup)
        {
            ClosePopup();
            return;
        }

        int windowWidth = await JS.InvokeAsync<int>("getWindowWidth");

        if (e.ClientX < windowWidth/2)
        {
            PreviousPage();
        }
        else
        {
            NextPage();
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
        selectedEdrdgEntry = null;
    }

}
