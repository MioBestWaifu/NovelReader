@using Maria.Readers.Handlers
@using Maria.Translation.Japanese
@using Maria.Translation.Japanese.Edrdg
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics
@using Microsoft.JSInterop

<!--Weird path because this is a library, it is suposed to be used in other projects and this is the way to access files in other projects, it does not get automatically sorted out-->
<script src="_content/Readers/interop.js"></script>

<div id="viewer" style="width:94vw;margin:auto" @onclick="HandleClickOnContent" @onkeydown="HandleKeyPress" tabindex="0">
    @if (Initialized)
    {
        <h1>@Book?.TableOfContents[CurrentChapter].Item1</h1>
        @foreach (List<Node> line in Pages[CurrentPage])
        {
            <div style="margin-bottom:5px; display:flex; width:100%;flex-wrap:wrap;justify-content:flex-start">
                @foreach (Node node in line)
                {
                    <p @onclick="e => ShowPopup(e,node.EdrdgEntry)" @onclick:stopPropagation>@node.Text</p>
                }
            </div>
        }
    }
</div>

@if (showPopup)
{
    <div style="position:fixed;top:0;left:0">
            <TranslationCard Entry="selectedEdrdgEntry" OnClose="ClosePopup"/>
    </div>
}
@code {
    [Inject]
    private IJSRuntime JS { get; set; }

    [Parameter]
    public string PathToFile { get; set; }

    private Epub? Book { get; set; } = null;
    //I sure have a penchant for nested lists. But what can I do? A book IS a list of pages, a page IS a list of lines, and a line IS a list of words. I dont make the rules. Is there some smarter data structure? Probably. But who cares, this is fine.
    private List<List<List<Node>>> Pages { get; set; } = new List<List<List<Node>>>();

    private int CurrentChapter { get; set; } = 0;
    private int CurrentPage { get; set; } = 0;

    private bool Initialized { get; set; } = false;

    private double previousElementX = 0;
    private double previousElementY = 0;

    private bool showPopup = false;
    private EdrdgEntry selectedEdrdgEntry;

    protected override Task OnInitializedAsync()
    {
        JapaneseTranslator.PathToUnidic = "D:\\Programs\\Data\\Unidic";
        JapaneseTranslator.PathToDictionary = "D:\\Programs\\Maria-chan\\Services\\Translation\\JMDict\\";
        try
        {
            JapaneseTranslator.Initialize();
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);
        }
        return base.OnInitializedAsync();
    }


    protected override async Task OnParametersSetAsync()
    {
        Debug.WriteLine("PathToFile: " + PathToFile);

        Book = await EpubLoader.LoadEpub(PathToFile);
        CurrentChapter = 11;
        Task.Run(() => LoadChapter(11)).ContinueWith(t =>
    {
        InvokeAsync(() =>
        {
            Initialized = true;
            StateHasChanged(); // Notify Blazor to re-render the component
        });
    });
    }

    private void NextPage()
    {
        if (CurrentPage < Pages.Count - 1)
        {
            CurrentPage++;
        }
        else
        {
            NextChapter();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 0)
        {
            CurrentPage--;
        }
        else
        {
            PreviousChapter();
        }
    }

    private void NextChapter()
    {
        if (CurrentChapter < Book?.TableOfContents.Count - 1)
        {
            CurrentChapter++;
            Task.Run(() => LoadChapter(CurrentChapter));
        }
    }

    private void PreviousChapter()
    {
        if(CurrentChapter>0)
        {
            CurrentChapter--;
            Task.Run(() => LoadChapter(CurrentChapter));
        }
    }

    private async Task LoadChapter(int index)
    {
        Chapter chapter = Book.TableOfContents[index].Item2;
        if (!chapter.Loaded)
        {
            //Formatter.Load does not seem like good naming
            await EpubFormatter.LoadChapter(chapter);
        }

        Pages = await BreakChapterToPages(chapter);
        CurrentPage = 0;
    }

    private async Task<List<List<List<Node>>>> BreakChapterToPages(Chapter chapter)
    {
        //Value out of my ass, replace with something actual based on the used css + margins
        int lineHeight = 30;
        int windowHeight = await JS.InvokeAsync<int>("getWindowHeight");
        int linesPerPage = windowHeight / lineHeight;

        List<List<List<Node>>> pages = [];
        List<List<Node>> currentPage = [];
        foreach (List<Node> line in chapter.Lines)
        {
            currentPage.Add(line);

            if (currentPage.Count == linesPerPage)
            {
                pages.Add(currentPage);
                currentPage = new List<List<Node>>();
            }
        }

        // Add the last page if it has any lines
        if (currentPage.Count > 0)
        {
            pages.Add(currentPage);
        }

        return pages;
    }

    private async void ShowPopup(MouseEventArgs e,EdrdgEntry edrdgEntry)
    {
        //Necessary because not everything has a translation for various reasons
        if (edrdgEntry is null)
        {
            return;
        }
        selectedEdrdgEntry = edrdgEntry;
        if(showPopup)
        {
            await RemovePreviousElementBackgroundColor();
        }
        showPopup = true;
        await JS.InvokeVoidAsync("setElementBackgroundColor",e.ClientX,e.ClientY,"aquamarine");
        previousElementX = e.ClientX;
        previousElementY = e.ClientY;
    }

    private async void HandleClickOnContent(MouseEventArgs e)
    {
        if (showPopup)
        {
            ClosePopup();
            return;
        }

        int windowWidth = await JS.InvokeAsync<int>("getWindowHeight");

        if (e.ClientX < windowWidth/2)
        {
            PreviousPage();
        }
        else
        {
            NextPage();
        }
        //Does not work without this call. Shouldn't Blazor be able to detect changes and re-render automatically? 
        StateHasChanged();
    }

    private async Task RemovePreviousElementBackgroundColor()
    {
        await JS.InvokeVoidAsync("removeElementBackgroundColor",previousElementX,previousElementY);
        previousElementX = -1;
        previousElementY = -1;
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch(e.Key)
        {
            case "Escape":
                if(showPopup)
                    ClosePopup();
                break;
            case "ArrowLeft":
                PreviousPage();
                break;
            case "ArrowRight":
                NextPage();
                break;
        }
        //Does not work without this call. Shouldn't Blazor be able to detect changes and re-render automatically? 
        StateHasChanged();
    }

    private async void ClosePopup()
    {
        showPopup = false;
        selectedEdrdgEntry = null;
        await RemovePreviousElementBackgroundColor();
    }

}
