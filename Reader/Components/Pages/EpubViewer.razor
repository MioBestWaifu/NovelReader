@using System.Xml.Linq
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.Maui.Devices
@using Mio.Reader.Components.Pages
@using Mio.Reader.Services

@layout MainLayout
@page "/reader"

<FluentDesignTheme Mode="DesignThemeModes.Dark" CustomColor=@Configs.MainColor></FluentDesignTheme>
@if (Initialized)
{
    <!--Using ternary for conditional classes becasuse so far there are only two reading manners and I dont plan on making others.-->
    <div id="viewer" class="@(ReadingManner == ReadingManner.Japanese ? "rdr-japanese-viewer" : "rdr-western-viewer")" @onkeydown="HandleKeyPress" @ontouchstart="HandleTouchStart" @ontouchmove="HandleTouchMove" @ontouchend="HandleTouchEnd" tabindex="0">
        @{
            Chapter chapter = Book!.TableOfContents[CurrentChapter].Item2;
        }

        @if (!chapter.IsImagesOnly)
        {
            <h1 id="chapter-title" class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text":"")" @onclick="(() => {showTableOfContents = true; StateHasChanged();})">@Book?.TableOfContents[CurrentChapter].Item1</h1>
        }

        <!--Gets blurry when scrolling, dont know why-->
        <FluentMenu HorizontalInset=true HorizontalPosition="HorizontalPosition.Left" VerticalInset=true VerticalPosition="VerticalPosition.Top" Anchor="chapter-title" @bind-Open=@showTableOfContents
        Width="@(ReadingManner == ReadingManner.Japanese ? "300px" : "100%")">
            <div class="@(ReadingManner == ReadingManner.Japanese ? "toc" : "toc-mobile")">
                @for (int i = 0; i < Book.TableOfContents.Count; i++)
                {
                    int index = i;
                    <FluentMenuItem style="direction:ltr" OnClick="(() => {showTableOfContents = false; NavigateToChapter(index); })">@Book.TableOfContents[index].Item1</FluentMenuItem>
                }
            </div>
        </FluentMenu>

        @try
        {
            <!--Not a foreach because the dynamic modifications in loading would break it-->
            @for (int i = 0; i < Pages[CurrentPage].Count; i++)
            {
                var line = Pages[CurrentPage][i];
                <!--Images are their own single-node line-->
                @if (line[0] is TextNode)
                {
                    <!--Separators and auxiliaries (commas, ない, ect.) are their own node and therefore separated from "meaningful" nodes when the flex wraps. They should be annexed to the meaningful node before them.-->
                    //May seem strange to have p's inside p's, but this is done because on the one hand individual words need to be clickable, and on the other hand the mobile webview was not rendering vertical text properly in a div in landscape mode. This achieves both.
                    <p class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text-block":"rdr-western-text-block")">
                        @for (int j = 0; j < line.Count; j++)
                        {
                            TextNode node = (TextNode)line[j];
                            //This may create duplicate ids if there are more than 99 lines, but that should never happen. Keep in mind that each paragraph is actually one single line.
                            string id = $"p{i:D2}{j}";
                        <p class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text":"")" id="@id" @onclick="e => ShowPopup(e,id,node.EdrdgEntry)"
                           @onmouseleave="e => Task.Run(() => HandleMouseLeaveWord(e,id))" @onclick:stopPropagation @onmouseup:stopPropagation>@node.Text</p>
                        }
                    </p>
                }
                else if (line[0] is ImageNode)
                {
                    string cssClass = !chapter.IsImagesOnly && ReadingManner == ReadingManner.Japanese ? "rdr-inline-img-japanese" : "rdr-inline-img-western";

                    ImageNode imageNode = (ImageNode)line[0];
                    <img class=@cssClass src=@($"data:image/{imageNode.Type};base64,{imageNode.Text}") />
                }
            }
        }
        catch (Exception e)
        {

            <p>Error displaying this page</p>

            fuckedLines++;
            Debug.WriteLine($"There have been {fuckedLines} fucked lines");
            Debug.WriteLine(e.Message);
            Debug.WriteLine(e.StackTrace);
            if (e.InnerException is not null)
            {
                Debug.WriteLine(e.InnerException);
                Debug.WriteLine(e.InnerException?.StackTrace);
            }
            Debug.WriteLine("----------------------------");
        }

    </div>
}
@if (showPopup)
{
    <FluentTooltip @onmouseenter="(() => enteredTooltip = true)" @onmouseleave="ClosePopup"  UseTooltipService="false" Anchor=@selectedWordId OnDismissed="ClosePopup" Id="translation-card">
        <TranslationCard Entry=@selectedEdrdgEntry />
    </FluentTooltip>
}

<div class=@navigatorClass @onmouseenter="(() => {animationCounter = 999999; CurrentPage = CurrentPage;})" @onmouseleave="(() => {animationCounter = 0; StartOrResetNavigatorAnimation();})">
    <!--Using the base accent color like that is bad. Will make these very apart from the rest of the theme-->
    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowLeft())" Color="Color.Custom" CustomColor=@Configs.MainColor
    OnClick="(() => {if (ReadingManner == ReadingManner.Japanese) NextPage(); else PreviousPage();})" />

    <div class="mx-2" style="color:var(--neutral-fill-layer-rest)">
        <input type="number" class="form-control" style="width:70px; display: inline-block;" min="1" max="@Pages.Count"
               value=@(CurrentPage + 1) @onchange="NavigateToPage" />
        / @Pages.Count
    </div>

    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowRight())" Color="Color.Custom" CustomColor=@Configs.MainColor 
        OnClick="(() => {if (ReadingManner == ReadingManner.Japanese) PreviousPage(); else NextPage();})" />
</div>


@code {
    [Inject]
    private IJSRuntime JS { get; set; }
    [Inject]
    private ConfigurationsService Configs { get; set; }
    [Inject]
    private LibraryService Library{ get; set; }

    [Parameter]
    public ReadingManner ReadingManner
    {
        get
        {
            return readingManner;
        }
        set
        {
            readingManner = value;
            ReadingMannerChanged();
        }
    }

    [Parameter]
    [SupplyParameterFromQuery]
    public int BookIndex { get; set; } = 7;

    private ReadingManner readingManner;

    private DevicePlatform plataform = DeviceInfo.Current.Platform;

    private Epub? Book { get; set; } = null;
    private EpubInteraction interaction;
    //I sure have a penchant for nested lists. But what can I do? A book IS a list of pages, a page IS a list of lines, and a line IS a list of words. I dont make the rules. Is there some smarter data structure? Probably. But who cares, this is fine.
    private List<List<List<Node>>> Pages { get; set; } = new List<List<List<Node>>>();

    private int CurrentChapter { get; set; } = 0;
    private int CurrentPage
    {
        get
        {
            return currentPage;
        }
        set
        {
            try
            {
                currentPage = value;
                navigatorClass = "rdr-navigator";
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                StartOrResetNavigatorAnimation();
            }
            catch (Exception e)
            {
                Debug.WriteLine(e.Message);
                Debug.WriteLine(e.InnerException);
                Debug.WriteLine(e.StackTrace);
            }
        }
    }


    private int currentPage;

    private bool Initialized { get; set; } = false;

    private string previousElementId = "";
    private double firstTouchX = 0;
    private double firstTouchY = 0;
    private double lastTouchX = 0;
    private double lastTouchY = 0;
    private bool enteredTooltip = false;

    private bool showPopup = false;
    private bool showTableOfContents = false;

    private string navigatorClass;
    private int animationCounter = 0;

    private string selectedWordId = "";
    private EdrdgEntry selectedEdrdgEntry;

    private int fuckedLines = 0;

    protected override Task OnInitializedAsync()
    {
        ReadingManner = ReadingManner.Japanese;
        CurrentPage = 0;
        interaction = Library.Books[BookIndex];
        CurrentChapter = interaction.LastChapter;
        Task.Run(() => SetBook());
        return base.OnInitializedAsync();
    }

    private async Task SetBook()
    {

        try
        {
            Book = await EpubLoader.LoadEpub(interaction.Metadata);
            Task.Run(() => LoadChapter(CurrentChapter, true));
        }
        catch (Exception e)
        {
            Debug.WriteLine(e.Message);
            Debug.WriteLine(e.InnerException);
            Debug.WriteLine(e.StackTrace);
        }
    }

    private void ReadingMannerChanged()
    {
        if (ReadingManner == ReadingManner.Japanese)
        {
            JS.InvokeVoidAsync("changeDirectionToRTL");
        }
        else
        {
            JS.InvokeVoidAsync("changeDirectionToLTR");
        }
    }

    private async void StartOrResetNavigatorAnimation()
    {
        animationCounter++;
        await Task.Delay(5000);
        animationCounter--;
        if (animationCounter <= 0)
        {
            animationCounter = 0;
            navigatorClass = "rdr-navigator rdr-start-animation";
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void NextPage()
    {
        if (showPopup)
        {
            ClosePopup();
        }
        if (CurrentPage < Pages.Count - 1)
        {
            CurrentPage++;
            interaction.LastPage = CurrentPage;
        }
        else
        {
            NextChapter();
        }

        if (ReadingManner == ReadingManner.Japanese)
            JS.InvokeVoidAsync("scrollToHorizontalStart");
        else
            JS.InvokeVoidAsync("scrollToVerticalStart");
    }

    private void PreviousPage()
    {
        if (showPopup)
        {
            ClosePopup();
        }
        if (CurrentPage > 0)
        {
            CurrentPage--;
            interaction.LastPage = CurrentPage;
        }
        else
        {
            PreviousChapter();
        }

        if (ReadingManner == ReadingManner.Japanese)
            JS.InvokeVoidAsync("scrollToHorizontalStart");
        else
            JS.InvokeVoidAsync("scrollToVerticalStart");
    }


    private void NavigateToPage(ChangeEventArgs e)
    {
        if (showPopup)
        {
            ClosePopup();
        }

        int page = int.Parse(e.Value.ToString());
        if (page < 1 || page > Pages.Count)
        {
            return;
        }

        page--;

        if (CurrentPage != page)
        {
            CurrentPage = page;
            interaction.LastPage = CurrentPage;
            if (ReadingManner == ReadingManner.Japanese)
                JS.InvokeVoidAsync("scrollToHorizontalStart");
            else
                JS.InvokeVoidAsync("scrollToVerticalStart");
        }
    }

    private void NavigateToChapter(int index)
    {
        if (showPopup)
        {
            ClosePopup();
        }
        if (CurrentChapter != index)
        {
            CurrentChapter = index;
            interaction.LastChapter = CurrentChapter;
            Task.Run(() => LoadChapter(CurrentChapter));
        }
    }

    private void NextChapter()
    {
        if (CurrentChapter < Book?.TableOfContents.Count - 1)
        {
            CurrentChapter++;
            interaction.LastChapter = CurrentChapter;
            Task.Run(() => LoadChapter(CurrentChapter));
        }
    }

    private void PreviousChapter()
    {
        if (CurrentChapter > 0)
        {
            CurrentChapter--;
            interaction.LastChapter = CurrentChapter;
            Task.Run(() => LoadChapter(CurrentChapter));
        }
    }

    private async Task LoadChapter(int index, bool firstLoad = false)
    {
        Chapter chapter = Book.TableOfContents[index].Item2;
        //To keep track of if the user went to another chapter while the current one was loading
        int thisTaskChapterIndex = CurrentChapter;
        List<Task> children = new List<Task>();

        //There needs to be error handling here. Like, a chapter cannot be in loading state forever if something breaks in the loadings. Also, the error needs to be shown and logged.
        if (chapter.LoadStatus == LoadingStatus.Unloaded)
        {
            List<XElement> lines = await EpubParser.BreakChapterToLines(chapter);
            Pages = await PreparePages(lines);
            if(firstLoad && interaction.LastTimeNumberOfPages != 0)
            {
                CurrentPage = interaction.LastTimeNumberOfPages == Pages.Count ? interaction.LastPage : 0;
            } else
            {
                CurrentPage = 0;
            }

            interaction.LastTimeNumberOfPages = Pages.Count;

            chapter.PrepareLines(lines.Count);

            //For the first loading
            Initialized = true;

            chapter.LoadStatus = LoadingStatus.Loading;
            for (int i = 0; i < lines.Count; i++)
            {
                int currentIndex = i; // Capture the current index
                children.Add(EpubParser.ParseLine(chapter, lines[currentIndex]).ContinueWith(parseLineTask =>
                {
                    Debug.WriteLine("Parsing line " + currentIndex);
                    List<Node> line = parseLineTask.Result;
                    chapter.PushLineToIndex(currentIndex, line);
                    if (thisTaskChapterIndex == CurrentChapter)
                    {
                        PushLineToPages(currentIndex, line);
                        InvokeAsync(() =>
                        {
                            StateHasChanged();
                        });
                    }
                }));
            }

            Task.WhenAll(children).ContinueWith(t =>
            {
                chapter.LoadStatus = LoadingStatus.Loaded;
                InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
            });
        }

        else
        {
            Pages = await BreakChapterToPages(chapter);
            CurrentPage = 0;
            InvokeAsync(() =>
            {
                StateHasChanged();
            });
        }
    }

    private void PushLineToPages(int index, List<Node> line)
    {
        int linesPerPage = Pages[CurrentPage].Count;
        int pageIndex = Math.DivRem(index, linesPerPage, out int lineIndex);
        Pages[pageIndex][lineIndex] = line;
    }

    private int GetLinesPerPage()
    {
        int linesPerPage;
        if (ReadingManner == ReadingManner.Japanese)
        {
            //Value out of my ass, replace with something actual based on the used css + margins
            int lineWidth = 40;
            int windowWidth = JS.InvokeAsync<int>("getWindowWidth").GetAwaiter().GetResult();
            linesPerPage = windowWidth / lineWidth;
        }
        else
        {
            //Value out of my ass, replace with something actual based on the used css + margins
            int lineHeight = 30;
            int windowHeight = JS.InvokeAsync<int>("getWindowHeight").GetAwaiter().GetResult();
            linesPerPage = windowHeight / lineHeight;
        }

        return linesPerPage;
    }

    private async Task<List<List<List<Node>>>> PreparePages(List<XElement> lines)
    {
        int linesPerPage = GetLinesPerPage();

        List<List<List<Node>>> pages = new List<List<List<Node>>>();

        int totalLines = lines.Count;
        int totalPages = (totalLines + linesPerPage - 1) / linesPerPage; // Calculate total pages

        for (int i = 0; i < totalPages; i++)
        {
            List<List<Node>> page = new List<List<Node>>(linesPerPage); // Create a new page with linesPerPage lines
            for (int j = 0; j < linesPerPage; j++)
            {
                page.Add([new Node() { }]); // Add an empty line to the page
            }
            pages.Add(page); // Add the page to the pages
        }

        return pages;
    }


    private async Task<List<List<List<Node>>>> BreakChapterToPages(Chapter chapter)
    {

        int linesPerPage = GetLinesPerPage();
        List<List<List<Node>>> pages = [];
        List<List<Node>> currentPage = [];
        foreach (List<Node> line in chapter.Lines)
        {
            currentPage.Add(line);

            if (currentPage.Count == linesPerPage)
            {
                pages.Add(currentPage);
                currentPage = new List<List<Node>>();
            }
        }

        // Add the last page if it has any lines
        if (currentPage.Count > 0)
        {
            pages.Add(currentPage);
        }

        return pages;
    }

    private async void ShowPopup(MouseEventArgs e, string id, EdrdgEntry edrdgEntry)
    {

        //Necessary because not everything has a translation for various reasons, and android is not to respond to simple touches
        //Plataform == Plataform.Android ||
        if (edrdgEntry is null)
        {
            return;
        }
        selectedWordId = id;
        selectedEdrdgEntry = edrdgEntry;
        if (showPopup)
        {
            await RemovePreviousElementBackgroundColor();
        }
        showPopup = true;
        await JS.InvokeVoidAsync("setElementBackgroundColor", id, "#d3d3d3");
        previousElementId = id;
        StateHasChanged();
    }

    private async void ClosePopup()
    {
        showPopup = false;
        selectedEdrdgEntry = null;
        selectedWordId = "";
        enteredTooltip = false;
        await RemovePreviousElementBackgroundColor();
    }

    private async void HandleClickOnContent(MouseEventArgs e)
    {
        if (showPopup)
        {
            ClosePopup();
            return;
        }

        int windowWidth = await JS.InvokeAsync<int>("getWindowWidth");

        if (e.ScreenX < windowWidth / 2)
        {
            if (ReadingManner == ReadingManner.Japanese)
                NextPage();
            else
                PreviousPage();
        }
        else
        {
            if (ReadingManner == ReadingManner.Japanese)
                PreviousPage();
            else
                NextPage();
        }
        //Does not work without this call. Shouldn't Blazor be able to detect changes and re-render automatically?
        StateHasChanged();
    }

    private void HandleTouchStart(TouchEventArgs e)
    {
        if (plataform != DevicePlatform.Android)
            return;

        if (showPopup)
        {
            ClosePopup();
        }

        try
        {
            firstTouchX = e.Touches[0].ScreenX;
            firstTouchY = e.Touches[0].ScreenY;
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Touch start event error: " + ex.Message);
        }
    }

    private void HandleTouchMove(TouchEventArgs e)
    {
        if (plataform != DevicePlatform.Android)
            return;
        try
        {
            lastTouchX = e.Touches[0].ScreenX;
            lastTouchY = e.Touches[0].ScreenY;
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Touch move event error: " + ex.Message);
        }
    }

    private async void HandleTouchEnd(TouchEventArgs e)
    {
        if (plataform != DevicePlatform.Android)
            return;
        try
        {
            double minDeltaX = await JS.InvokeAsync<double>("getWindowWidth") / 4;
            double minDeltaY = await JS.InvokeAsync<double>("getWindowHeight") / 4;
            double deltaX = lastTouchX - firstTouchX;
            double deltaY = lastTouchY - firstTouchY;
            firstTouchX = 0;
            firstTouchY = 0;
            lastTouchX = 0;
            lastTouchY = 0;

            if (ReadingManner == ReadingManner.Japanese)
            {
                if (deltaY > minDeltaY)
                    PreviousPage();
                else if (deltaY < -minDeltaY)
                    NextPage();

            }
            else
            {
                if (deltaX > minDeltaX)
                    PreviousPage();
                else if (deltaX < -minDeltaX)
                    NextPage();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine("Touch end event error: " + ex.Message);
        }
    }

    private async void HandleMouseLeaveWord(MouseEventArgs e, string id)
    {
        await Task.Delay(700);
        if (!enteredTooltip && showPopup && selectedWordId == id)
        {
            ClosePopup();
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "Escape":
                if (showPopup)
                    ClosePopup();
                break;
            //These should be different on image-only pages, which is one more reason to have separate components for separate chapter types
            case "ArrowLeft":
                if (ReadingManner == ReadingManner.Western)
                    PreviousPage();
                break;
            case "ArrowRight":
                if (ReadingManner == ReadingManner.Western)
                    NextPage();
                break;
            case "ArrowUp":
                if (ReadingManner == ReadingManner.Japanese)
                    PreviousPage();
                break;
            case "ArrowDown":
                if (ReadingManner == ReadingManner.Japanese)
                    NextPage();
                break;
        }
        //Does not work without this call. Shouldn't Blazor be able to detect changes and re-render automatically?
        StateHasChanged();
    }



    private async Task RemovePreviousElementBackgroundColor()
    {
        await JS.InvokeVoidAsync("removeElementBackgroundColor", previousElementId);
        previousElementId = "";
    }

}
