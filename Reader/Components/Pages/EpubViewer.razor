@using System.Xml.Linq
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.JSInterop
@using Microsoft.Maui.Devices
@using Mio.Reader.Components.Pages
@using Mio.Reader.Services

@layout MainLayout
@page "/reader"

<FluentDesignTheme Mode="DesignThemeModes.Dark" CustomColor=@Configs.MainColor></FluentDesignTheme>
@if (Initialized)
{
    <!--Using ternary for conditional classes becasuse so far there are only two reading manners and I dont plan on making others.-->
    <div id="viewer" class="@(ReadingManner == ReadingManner.Japanese ? "rdr-japanese-viewer" : "rdr-western-viewer")" @onkeydown="HandleKeyPress" @ondblclick="HandleDoubleClick" tabindex="0">
        @{
            Chapter chapter = Book!.TableOfContents[CurrentChapter].Item2;
        }

        @if (!chapter.IsImagesOnly)
        {
            <h1 id="chapter-title" class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text":"")" @onclick="(() => {showTableOfContents = true; StateHasChanged();})">@Book?.TableOfContents[CurrentChapter].Item1</h1>
        }

        <!--Gets blurry when scrolling, dont know why-->
        <FluentMenu HorizontalInset=true HorizontalPosition="HorizontalPosition.Left" VerticalInset=true VerticalPosition="VerticalPosition.Top" Anchor="chapter-title" @bind-Open=@showTableOfContents
                    Width="@(ReadingManner == ReadingManner.Japanese ? "300px" : "100%")">
            <div class="@(ReadingManner == ReadingManner.Japanese ? "toc-japanese" : "toc-western")">
                @for (int i = 0; i < Book.TableOfContents.Count; i++)
                {
                    int index = i;
                    <FluentMenuItem style="direction:ltr" OnClick="(() => {showTableOfContents = false; NavigateToChapter(index); })">@Book.TableOfContents[index].Item1</FluentMenuItem>
                }
            </div>
        </FluentMenu>

        @if (showPopup)
        {
            <FluentPopover Style="max-height:45vh;max-width:45vw;overflow:auto;direction:ltr" VerticalPosition="VerticalPosition.Unset" HorizontalPosition="HorizontalPosition.Unset" 
                AnchorId=@selectedWordId Open=showPopup OpenChanged="(e => {if (!e) ClosePopup();})" 
                HorizontalInset=false Id="translation-card">
                <Header>
                    <p style="font-weight: normal;font-size: 22px;">@JoinKanjis(selectedEdrdgEntry.KanjiElements)</p>
                </Header>
                <Body>
                    <div class="card-body d-flex flex-column gap-3" style="direction:ltr">
                        <div>
                            <p>@JoinReadings(selectedEdrdgEntry.ReadingElements)</p>
                        </div>
                        <div>
                            <ol class="list-unstyled">
                                @foreach (var (sense, index) in selectedEdrdgEntry.SenseElements.Select((value, i) => (value, i)))
                                {
                                    <li>@(index + 1). @string.Join(", ", sense.Glosses)</li>
                                }
                            </ol>
                        </div>
                    </div>
                </Body>
            </FluentPopover>
        }

        @try
        {
            <!--Not a foreach because the dynamic modifications in loading would break it-->
            @for (int i = 0; i < Pages[CurrentPage].Count; i++)
            {
                var line = Pages[CurrentPage][i];
                <!--Images are their own single-node line-->
                @if (line[0] is TextNode)
                {
                    <!--Separators and auxiliaries (commas, ない, ect.) are their own node and therefore separated from "meaningful" nodes when the flex wraps. They should be annexed to the meaningful node before them.-->
                    <div class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text-block":"rdr-western-text-block")">
                        @for (int j = 0; j < line.Count; j++)
                        {
                            TextNode node = (TextNode)line[j];
                            //This may create duplicate ids if there are more than 99 lines, but that should never happen. Keep in mind that each paragraph is actually one single line.
                            string id = $"p{i:D2}{j}";
                        <p style="@(plataform == DevicePlatform.Android ? "user-select:none;":"")" class="@(ReadingManner == ReadingManner.Japanese? "rdr-japanese-text":"")" id="@id" @onclick="e => HandleClickOnElement(e,id,node.EdrdgEntry)"
                           @ontouchstart="e => {Task.Run(() => HandleTouchStart(e,id,node.EdrdgEntry));}" @ontouchend="() => touchId++" @onclick:stopPropagation @onmouseup:stopPropagation>@node.Text</p>
                        }
                    </div>
                }
                else if (line[0] is ImageNode)
                {
                    string cssClass = !chapter.IsImagesOnly && ReadingManner == ReadingManner.Japanese ? "rdr-inline-img-japanese" : "rdr-inline-img-western";

                    ImageNode imageNode = (ImageNode)line[0];
                    <img class=@cssClass src=@($"data:image/{imageNode.Type};base64,{imageNode.Text}") />
                }
            }
        }
        catch (Exception e)
        {

            <p>Error displaying this page</p>

            fuckedLines++;
            Debug.WriteLine($"There have been {fuckedLines} fucked lines");
            Debug.WriteLine(e.Message);
            Debug.WriteLine(e.StackTrace);
            if (e.InnerException is not null)
            {
                Debug.WriteLine(e.InnerException);
                Debug.WriteLine(e.InnerException?.StackTrace);
            }
            Debug.WriteLine("----------------------------");
        }

    </div>
}


<div class=@navigatorClass @onmouseenter="(() => {animationCounter = 999999; CurrentPage = CurrentPage;})" @onmouseleave="(() => {animationCounter = 0; StartOrResetNavigatorAnimation();})">
    <!--Using the base accent color like that is bad. Will make these very apart from the rest of the theme-->
    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowLeft())" Color="Color.Custom" CustomColor=@Configs.MainColor
                OnClick="(() => {if (ReadingManner == ReadingManner.Japanese) NextPage(); else PreviousPage();})" />

    <div class="mx-2" style="color:var(--neutral-fill-layer-rest)">
        <input type="number" class="form-control" style="width:70px; display: inline-block;" min="1" max="@Pages.Count"
               value=@(CurrentPage + 1) @onchange="NavigateToPage" />
        / @Pages.Count
    </div>

    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowRight())" Color="Color.Custom" CustomColor=@Configs.MainColor
                OnClick="(() => {if (ReadingManner == ReadingManner.Japanese) PreviousPage(); else NextPage();})" />
</div>


