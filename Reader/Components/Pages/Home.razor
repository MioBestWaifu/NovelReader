@using System.Diagnostics
@using CommunityToolkit.Maui.Storage
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.Maui.Devices
@using System.IO.Compression
@using Mio.Reader.Services


@page "/"

<!--Should have different pages instead of a if-else-->
<FluentDesignTheme Mode="DesignThemeModes.Dark" CustomColor="#CF9FFF" />
@if (string.IsNullOrEmpty(Configurations.PathToLibrary))
{
    <div class="mx-auto d-flex flex-column align-items-center" style="width:fit-content">
        <h4>No library folder has been chosen. Please choose one.</h4>
        <FluentButton Class="rdr-standard-button" OnClick="PickLibraryFolder" IconStart="@(new Icons.Regular.Size16.FolderAdd())" Appearance="Appearance.Accent">Pick Folder</FluentButton>
    </div>
}
else
{
    if (plataform == DevicePlatform.WinUI || UnidicDetermined)
    {
        <Library OnBookSelected="@(i => { Navigator.NavigateTo($"/reader?bookIndex={i}");})" />
    }
    else 
    {
        <div class="mx-auto d-flex flex-column align-items-center" style="width:fit-content">
            <h4>Download the Unidic to proceed. It may take a few minute.</h4>
            @{
                bool disabled = false;
            }
            <!--Not sure if the StateHasChanged call there is needed-->
            <FluentButton Class="rdr-standard-button" OnClick="(() => {disabled = true; StateHasChanged();Task.Run(() => DownloadUnidic());})" IconStart="@(new Icons.Regular.Size16.ArrowDownload())" Appearance="Appearance.Accent" Disabled=@disabled>Download</FluentButton>
        </div>
    }
}


@code {
    [Inject]
    NavigationManager Navigator{ get; set; }
    [Inject]
    ConfigurationsService Configurations { get; set; }
    [Inject]
    DataManagementService DataManager { get; set; }

    DevicePlatform plataform = DeviceInfo.Current.Platform;
    bool UnidicDetermined { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        if (plataform == DevicePlatform.Android)
        {
            UnidicDetermined = Directory.Exists(Configurations.PathToUnidic);
            InvokeAsync(() => { StateHasChanged(); });
        }
        return base.OnInitializedAsync();
    }

    private async void PickLibraryFolder()
    {
        if (plataform == DevicePlatform.Android)
        {
            if (!await Utils.RequestStoragePermissions())
                return;
        }

        FolderPickerResult result = await FolderPicker.Default.PickAsync();
        if (!result.IsSuccessful)
            return;

        Configurations.PathToLibrary = result.Folder.Path;
        Debug.WriteLine(Configurations.PathToLibrary);
        StateHasChanged();
    }

    private async void DownloadUnidic()
    {
        UnidicDetermined = await DataManager.DownloadUnidic();

        InvokeAsync(() => StateHasChanged());
    }
}