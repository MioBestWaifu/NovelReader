@using System.Diagnostics
@using CommunityToolkit.Maui.Storage
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.Maui.Devices
@using System.IO.Compression
@using Mio.Reader.Services


@page "/"

<!--Should have different pages instead of a if-else-->
<FluentDesignTheme Mode="DesignThemeModes.Dark" OfficeColor="OfficeColor.Stream" />
@if (string.IsNullOrEmpty(Configurations.PathToLibrary))
{
    <p>Some text here to test colors</p>
    <button @onclick="PickLibraryFolder">Pick the library folder</button>
    <FluentButton Appearance="Appearance.Outline">AAAAA</FluentButton>
}
else
{
    if (plataform == DevicePlatform.WinUI || UnidicDetermined)
    {
        <Library OnBookSelected="@(i => { Navigator.NavigateTo($"/reader?bookIndex={i}");})" />
    }
    else 
    {
        <p>Download the Unidic to proceed. It may take a few minutes</p>
        //TODO ensure this is only called once
        <button @onclick="DownloadUnidic">Download Unidic</button>
    }
}


@code {
    [Inject]
    NavigationManager Navigator{ get; set; }
    [Inject]
    ConfigurationsService Configurations { get; set; }
    [Inject]
    DataManagementService DataManager { get; set; }

    DevicePlatform plataform = DeviceInfo.Current.Platform;
    bool UnidicDetermined { get; set; } = false;

    protected override Task OnInitializedAsync()
    {
        if (plataform == DevicePlatform.Android)
        {
            UnidicDetermined = Directory.Exists(Configurations.PathToUnidic);
            InvokeAsync(() => { StateHasChanged(); });
        }
        return base.OnInitializedAsync();
    }

    private async void PickLibraryFolder()
    {
        if (plataform == DevicePlatform.Android)
        {
            if (!await Utils.RequestStoragePermissions())
                return;
        }

        FolderPickerResult result = await FolderPicker.Default.PickAsync();
        if (!result.IsSuccessful)
            return;

        Configurations.PathToLibrary = result.Folder.Path;
        Debug.WriteLine(Configurations.PathToLibrary);
        StateHasChanged();
    }

    private async void DownloadUnidic()
    {
        //Pretty sure this freezes the UI. Keping like that for testing purposes
        UnidicDetermined = await DataManager.DownloadUnidic();
        StateHasChanged();
    }
}