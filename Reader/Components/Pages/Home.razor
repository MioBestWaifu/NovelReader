@using System.Diagnostics
@using CommunityToolkit.Maui.Storage
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.Maui.Devices
@using Mio.Reader.Components.Viewers
@using Mio.Reader.Components.Pickers
@using System.IO.Compression

@inject NavigationManager Navigatior

@page "/"

<!--Should have different pages instead of a if-else-->
@if (string.IsNullOrEmpty(PathToLibrary))
{
    <button @onclick="PickLibraryFolder">Pick the library folder</button>
}
else
{
    if (plataform == DevicePlatform.WinUI || UnidicDetermined)
    {
        <Library PathToLibrary="@PathToLibrary" OnBookSelected="@(m => {BookSelected = m; Navigatior.NavigateTo("/reader");})"/>

    }
    else 
    {
        <p>Download the Unidic to proceed. It may take a few minutes</p>
        //TODO ensure this is only called once
        <button @onclick="DownloadUnidic">Download Unidic</button>
    }
}


@code {
    DevicePlatform plataform = DeviceInfo.Current.Platform;
    bool FileHasBeenPicked { get; set; } = false;
    string PathToFile { get; set; }
    string PathToLibrary { get; set; }
    bool UnidicDetermined { get; set; } = false;
    //Temporary. Should be in a service or something
    public static EpubMetadata? BookSelected { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (plataform == DevicePlatform.Android)
        {
            UnidicDetermined = Directory.Exists(Configurations.Current.PathToUnidic);
            InvokeAsync(() => { StateHasChanged(); });
        }
        return base.OnInitializedAsync();
    }

    private void OnFilePickedWindows(string path)
    {
        PathToFile = path;
        FileHasBeenPicked = true;
        StateHasChanged();
    }

    private void OnFilePickedAndroid(FileResult fileResult)
    {
        PathToFile = fileResult.FullPath;
        FileHasBeenPicked = true;
        StateHasChanged();
    }

    private async void PickLibraryFolder()
    {
        if (plataform == DevicePlatform.Android)
        {
            if (!await AndroidFilePicker.RequestFilesPermission())
                return;
        }

        FolderPickerResult result = await FolderPicker.Default.PickAsync();
        if (!result.IsSuccessful)
            return;

        PathToLibrary = result.Folder.Path;
        Debug.WriteLine(PathToLibrary);
        StateHasChanged();
    }

    //Here temporarily, should be somewhere else
    public async Task<string> DownloadUnidic()
    {
        try
        {
            // Create a HttpClient instance
            using (HttpClient client = new HttpClient())
            {
                client.Timeout = System.Threading.Timeout.InfiniteTimeSpan;
                // Download the ZIP file
                byte[] zipData = await client.GetByteArrayAsync("https://clrd.ninjal.ac.jp/unidic_archive/2302/unidic-cwj-202302.zip");

                // Get the app's private data directory
                string appDataDir = FileSystem.AppDataDirectory;

                // Define the path for the downloaded ZIP file
                string zipFilePath = Path.Combine(appDataDir, "unidic-cwj-202302.zip");

                // Write the downloaded ZIP data to a file
                await File.WriteAllBytesAsync(zipFilePath, zipData);

                // Define the path for the target extraction directory
                string extractionDirPath = Configurations.Current.PathToUnidic;

                // Extract the ZIP file contents
                ZipFile.ExtractToDirectory(zipFilePath, extractionDirPath);

                // Delete the downloaded ZIP file
                File.Delete(zipFilePath);

                UnidicDetermined = true;
                InvokeAsync(() => { StateHasChanged(); });

                return extractionDirPath;
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error downloading and extracting ZIP file: {ex.Message}");
            return null;
        }
    }

    private async void PickUnidicPath()
    {
        try
        {
            var result = await FolderPicker.Default.PickAsync();

            if (result != null)
            {
                EpubFormatter.analyzer = new JapaneseAnalyzer(result.Folder.Path);
                UnidicDetermined = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.StackTrace);
        }
    }
}