@using Mio.Reader.Services
<div class="d-flex flex-wrap justify-content-evenly gap-3">
    @for (int i = 0; i < LibraryService.Books.Count; i++)
    {
        int currentIterationIndex = i;
        BookMetadata book = LibraryService.Books[currentIterationIndex].Metadata;
        string fileType = book.Path.Split('.').Last();
        <FluentCard Class="rdr-card" Width="220px" Height="430px">
            <img class="pointer" src=@($"data:image/jpeg;base64,{book.CoverBase64}") style="height: 330px; width:220px;"
            @onclick="(() => OnBookSelected.InvokeAsync((currentIterationIndex,fileType)))" />
            <p class="pointer hover-underline" @onclick="(() => OnBookSelected.InvokeAsync((currentIterationIndex,fileType)))">@book.Title</p>
            <p class="rdr-xsmall-text pointer hover-underline">@book.Author</p>
        </FluentCard>
    
    }
</div>

@code {
    //Pretty sure the use of image above gets fucked if the cover is in a format othar than jpg. 
    [Parameter]
    public EventCallback<(int,string)> OnBookSelected { get; set; }

    [Inject]
    public LibraryService LibraryService { get; set; }

    protected override void OnInitialized()
    {
        LibraryService.BookAdded += (sender, e) => InvokeAsync(() => StateHasChanged());
        Task.Run(() => LibraryService.Initialize());
    }
}
