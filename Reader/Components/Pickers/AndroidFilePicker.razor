@if (ShowLackOfPermissionPopup)
{
    <div class="alert alert-warning alert-dismissible fade show" role="alert">
        <strong>Warning!</strong> You refused permission to read and write to files. To proceed, please grant those permissions.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close" @onclick="()=> {ShowLackOfPermissionPopup = false; StateHasChanged();}">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}

<PickerButton OnClick="PickFile"></PickerButton>


@code {
    [Parameter]
    public EventCallback<FileResult> OnFilePicked { get; set; }

    bool ShowLackOfPermissionPopup { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        ShowLackOfPermissionPopup = false;
        await base.OnInitializedAsync();
    }
    public static async Task<bool> RequestFilesPermission()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.StorageRead>();

        if (status != PermissionStatus.Granted)
        {
            status = await Permissions.RequestAsync<Permissions.StorageRead>();

            if (status == PermissionStatus.Granted)
            {
                status = await Permissions.CheckStatusAsync<Permissions.StorageWrite>();

                if (status != PermissionStatus.Granted)
                {
                    status = await Permissions.RequestAsync<Permissions.StorageWrite>();
                }
            }
        }

        return status == PermissionStatus.Granted;
    }

    /// <summary>
    /// Returns null in the case of lack of permissions or file not picked.
    /// </summary>
    /// <returns></returns>
    public async Task<FileResult> PickFile()
    {
        bool permissionGranted = await RequestFilesPermission();

        if (!permissionGranted)
        {
            ShowLackOfPermissionPopup = true;
            StateHasChanged();
            return null;
        }

        var result = await FilePicker.PickAsync(new PickOptions
            {
                PickerTitle = "Please select an EPUB file",
                FileTypes = new FilePickerFileType(new Dictionary<DevicePlatform, IEnumerable<string>>
            {
                { DevicePlatform.Android, new[] { "application/epub+zip" } },
            })
            });

       OnFilePicked.InvokeAsync(result);

        return result;
    }


}
